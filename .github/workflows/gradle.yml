name: Java CI with Gradle # Workflow 이름

on: # Workflow를 자동으로 트리거 하기 위한 이벤트
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# S3 배포 bucket
env:
  S3_BUCKET_NAME: pium-deploy-bucket
  DEPLOY_ZIP_NAME: pium-deploy.zip

jobs: # 병렬로 실행되는 작업 단위, 여러 step으로 이루어짐
  build:

    runs-on: ubuntu-latest # 스크립트를 작동한 OS
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4 # 재사용 가능한 워크플로 파일의 위치 및 버
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    #  프로젝트 실행 권한 부여 및 buil
    - name: Build with Gradle (without tests)
      run: |
        cd backend_spring
        chmod +x ./gradlew
        ./gradlew clean build -x test
      
    # 프로젝트 압축
    - name: Make deployment zip
      run: |
        cd backend_spring
        zip -r ../${{ env.DEPLOY_ZIP_NAME }} . -x "*.git*" "build/*"

    # AWS 권한 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # 압축한 프로젝트를 S3로 전송
    - name: Upload to S3
      run: |
        aws s3 cp ${{ env.DEPLOY_ZIP_NAME }} s3://${{ env.S3_BUCKET_NAME }}/
        
  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Submit Gradle Dependencies
      run: |
        cd backend_spring
        chmod +x ./gradlew
        ./gradlew dependencies
